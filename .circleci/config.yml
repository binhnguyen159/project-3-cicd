version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy_environment_fe:
    steps:
      - run:
          name: Destroy enviroment
          when: on_fail
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  destroy_environment_be:
    steps:
      - run:
          name: Destroy enviroment
          when: on_fail
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            npm install
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            npm install
            npm run test

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            npm install
            npm run build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again

  deploy-infrastructure-fe:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - destroy_environment_fe

  deploy-infrastructure-be:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - destroy_environment_be

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  p3-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - notify:
          context: slack-secrets
      - deploy-infrastructure-fe
      - deploy-infrastructure-be
      - get_last_deployment_id
